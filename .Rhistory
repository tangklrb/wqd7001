df = read.csv('data/data.csv', header=TRUE, sep = ",")
#Split Red And Blue Fighter into 2 data set
df1 = df[c(4,2,10:76,144)]
df2 = df[c(4,1,77:143,145)]
#Rename Column for btoh data set to prepare for row bind
for (x in names(df1)){
names(df1)[names(df1) == x] <- str_replace(x,"B_","")
}
for (x in names(df2)){
names(df2)[names(df2) == x] <- str_replace(x,"R_","")
}
#Bind 2 dataset
df3 <- rbind(df1,df2)
##Sort the data base on date, latest on top,
##so that when remove duplicate,
##lastest fight data will be on top
df4$date <- as.Date(df3$date,"%d/%m/%Y")
df4 <- df4[rev(order(df4$date)),]
df4 <- df3
df4$date <- as.Date(df3$date,"%d/%m/%Y")
df4 <- df4[rev(order(df4$date)),]
df4
df4[fighter=="Gerard Gordeau"]
df4[df4$fighter=="Gerard Gordeau"]
df4[df4$fighter=="Gerard Gordeau", ]
df4 %>% group_by(fighter) %>% n
df4 %>% group_by(fighter) %>% tally
df4 %>% group_by(fighter) %>% order_by(n()) %>% tally
df4 %>% group_by(fighter) %>% tally(sort=T)
df4[df4$fighter=="Donald Cerrone", ]
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
library(stringr)
#load data
#df = read.csv("C:/Users/Soon Loong/Desktop/ufcdata/data.csv")
setwd('/home/kitlim/wqd7001/ShinyTest/GroupProject/')
df = read.csv('data/data.csv', header=TRUE, sep = ",")
#Split Red And Blue Fighter into 2 data set
df1 = df[c(4,2,10:76,144)]
df2 = df[c(4,1,77:143,145)]
#Rename Column for btoh data set to prepare for row bind
for (x in names(df1)){
names(df1)[names(df1) == x] <- str_replace(x,"B_","")
}
for (x in names(df2)){
names(df2)[names(df2) == x] <- str_replace(x,"R_","")
}
#Bind 2 dataset
df3 <- rbind(df1,df2)
##Sort the data base on date, latest on top,
##so that when remove duplicate,
##lastest fight data will be on top
df4 <- df3
df4$date <- as.Date(df3$date,"%d/%m/%Y")
df4 <- df4[rev(order(df4$date)),]
##A quick Cleaning on the Data
## Remove Record with NA on fight data
df5 <- df4[!is.na(df4$avg_BODY_att),]
## 1 NA on Height, replace with Mean
df5[is.na(df5$Height_cms),]$Height_cms <- mean(df5$Height_cms, na.rm = T)
## Replace NA on reach with height x reach ratio
avgHeightReachRatio <- mean(df5$Reach_cms, na.rm = T) / mean(df5$Height_cms,na.rm = T)
df5[is.na(df5$Reach_cms),]$Reach_cms <- df5[is.na(df5$Reach_cms),]$Height_cms * avgHeightReachRatio
#replace NA age with mean
df5[is.na(df5$age),]$age <- mean(df5$age, na.rm = T)
#Remove Duplicate Fighter Data, only use the lastest
df6 <- df5[!duplicated(df5$fighter),]
# """
# Not Using These
# MaxDistance <- max(df6$avg_DISTANCE_landed)
# MaxClose <- max(df6$avg_CLINCH_landed)
# MaxGround <- max(df6$avg_GROUND_landed)
#
# df6$DistanceAttack <- df6$avg_DISTANCE_landed / MaxDistance
# df6$CloseAttack <- df6$avg_CLINCH_landed/ MaxClose
# df6$GroundAttack <- df6$avg_GROUND_landed/MaxGround
# """
## Compute Variable for visualization
df6$distance_att <- ifelse(df6$avg_DISTANCE_att == 0, 0, df6$avg_DISTANCE_landed / df6$avg_DISTANCE_att)
df6$close_att <- ifelse(df6$avg_CLINCH_att == 0,0,df6$avg_CLINCH_landed / df6$avg_CLINCH_att)
df6$ground_att <- ifelse(df6$avg_GROUND_att == 0 ,0, df6$avg_GROUND_landed / df6$avg_GROUND_att)
df6$distance_def <- ifelse(df6$avg_opp_DISTANCE_att == 0, 0, 1 - df6$avg_opp_DISTANCE_landed / df6$avg_opp_DISTANCE_att)
df6$close_def <- ifelse(df6$avg_opp_CLINCH_att == 0,0,1 - df6$avg_opp_CLINCH_landed / df6$avg_opp_CLINCH_att)
df6$ground_def <- ifelse(df6$avg_opp_GROUND_att == 0 ,0,1 - df6$avg_opp_GROUND_landed / df6$avg_opp_GROUND_att)
df6$total_normal_att <-df6$avg_HEAD_att + df6$avg_BODY_att + df6$avg_LEG_att
df6$head_att_pct <- ifelse(df6$total_normal_att == 0, 0 , df6$avg_HEAD_att / df6$total_normal_att)
df6$head_att_acc <- ifelse(df6$avg_HEAD_att ==0,0,df6$avg_HEAD_landed /df6$avg_HEAD_att)
df6$body_att_pct <- ifelse(df6$total_normal_att ==0 , 0, df6$avg_BODY_att / df6$total_normal_att)
df6$body_att_acc <- ifelse(df6$avg_BODY_att== 0,0,df6$avg_BODY_landed /df6$avg_BODY_att)
df6$leg_att_pct <- ifelse(df6$total_normal_att == 0,0,df6$avg_LEG_att / df6$total_normal_att)
df6$leg_att_acc <- ifelse(df6$avg_LEG_att == 0,0,df6$avg_LEG_landed /df6$avg_LEG_att)
View(df6)
View(df6)
View(df5)
View(df5)
View(df4)
View(df4)
View(df3)
View(df3)
df4 <- df4[rev(order(df4$date)),]
df4$date <- as.Date(df3$date,"%d/%m/%Y")
View(df4)
View(df4)
df3 <- rbind(df1,df2)
df4 <- df4[rev(order(df4$date)),]
View(df4)
View(df4)
View(df3)
as.Date(df3$date,"%Y-%M-%d")
class(as.Date(df3$date,"%Y-%M-%d"))
df4$date <- as.Date(df3$date,"%Y-%M-%d")
View(df4)
df4 <- df3
df4$date <- as.Date(df3$date,"%Y-%M-%d")
df4 <- df4[rev(order(df4$date)),]
View(df4)
View(df3)
View(df4)
df4 <- df3
df4$date <- as.Date(df3$date,"%Y-%d-%M")
df4 <- df4[rev(order(df4$date)),]
View(df4)
df4 <- df3
df4$date <- as.Date(df3$date,"%d/%m/%Y")
df4 <- df4[rev(order(df4$date)),]
View(df4)
df4 <- df3
df4$date <- as.Date(df3$date, format = "%Y-%m-%d")
df4 <- df4[rev(order(df4$date)),]
View(df4)
View(df3)
df5 <- df4[!is.na(df4$avg_BODY_att),]
## 1 NA on Height, replace with Mean
df5[is.na(df5$Height_cms),]$Height_cms <- mean(df5$Height_cms, na.rm = T)
## Replace NA on reach with height x reach ratio
avgHeightReachRatio <- mean(df5$Reach_cms, na.rm = T) / mean(df5$Height_cms,na.rm = T)
df5[is.na(df5$Reach_cms),]$Reach_cms <- df5[is.na(df5$Reach_cms),]$Height_cms * avgHeightReachRatio
#replace NA age with mean
df5[is.na(df5$age),]$age <- mean(df5$age, na.rm = T)
#Remove Duplicate Fighter Data, only use the lastest
df6 <- df5[!duplicated(df5$fighter),]
View(df5)
View(df6)
df6 %>% group_by(fighter) %>% tally(sort=T)
df6$distance_att <- ifelse(df6$avg_DISTANCE_att == 0, 0, df6$avg_DISTANCE_landed / df6$avg_DISTANCE_att)
df6$close_att <- ifelse(df6$avg_CLINCH_att == 0,0,df6$avg_CLINCH_landed / df6$avg_CLINCH_att)
df6$ground_att <- ifelse(df6$avg_GROUND_att == 0 ,0, df6$avg_GROUND_landed / df6$avg_GROUND_att)
df6$distance_def <- ifelse(df6$avg_opp_DISTANCE_att == 0, 0, 1 - df6$avg_opp_DISTANCE_landed / df6$avg_opp_DISTANCE_att)
df6$close_def <- ifelse(df6$avg_opp_CLINCH_att == 0,0,1 - df6$avg_opp_CLINCH_landed / df6$avg_opp_CLINCH_att)
df6$ground_def <- ifelse(df6$avg_opp_GROUND_att == 0 ,0,1 - df6$avg_opp_GROUND_landed / df6$avg_opp_GROUND_att)
df6$total_normal_att <-df6$avg_HEAD_att + df6$avg_BODY_att + df6$avg_LEG_att
df6$head_att_pct <- ifelse(df6$total_normal_att == 0, 0 , df6$avg_HEAD_att / df6$total_normal_att)
df6$head_att_acc <- ifelse(df6$avg_HEAD_att ==0,0,df6$avg_HEAD_landed /df6$avg_HEAD_att)
df6$body_att_pct <- ifelse(df6$total_normal_att ==0 , 0, df6$avg_BODY_att / df6$total_normal_att)
df6$body_att_acc <- ifelse(df6$avg_BODY_att== 0,0,df6$avg_BODY_landed /df6$avg_BODY_att)
df6$leg_att_pct <- ifelse(df6$total_normal_att == 0,0,df6$avg_LEG_att / df6$total_normal_att)
df6$leg_att_acc <- ifelse(df6$avg_LEG_att == 0,0,df6$avg_LEG_landed /df6$avg_LEG_att)
View(df6)
profile = read.csv("data/profile.csv")
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
image <- image[duplicated(image$name),]
image <- profile[c("name","url")]
image <- image[duplicated(image$name),]
View(image)
image <- profile[c("name","url")]
View(image)
dup_image <- image[duplicated(image$name),]
View(dup_image)
dist_image <- image %>% filter(name)
dist_image <- image %>% distinct(name)
df7 <- merge(x = df6, y = image, by.x = "fighter",  by.y = "name",all.x = TRUE)
summary(df7)
View(df7)
df7[is.na(df7$url),]$fighter
View(dist_image)
View(df7)
df7
str(df7)
summary(df7)
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
image <- image[duplicated(image$name),]
##Join All
df7 <- merge(x = df6, y = image, by.x = "fighter",  by.y = "name",all.x = TRUE)
summary(df7)
##Names of Fighter that do not have url
df7[is.na(df7$url),]$fighter
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
image <- image[duplicated(image$name),]
df7[is.na(df7$url),]$fighter
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
#image <- image[duplicated(image$name),]
image <- image %>% distinct(name)
##Join All
df7 <- merge(x = df6, y = image, by.x = "fighter",  by.y = "name",all.x = TRUE)
summary(df7)
summary(df7)
str(df7)
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
#image <- image[duplicated(image$name),]
image <- image %>% distinct(name)
##Join All
df7 <- merge(x = df6, y = image, by.x = "fighter",  by.y = "name",all.x = TRUE)
summary(df7)
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
library(stringr)
#load data
#df = read.csv("C:/Users/Soon Loong/Desktop/ufcdata/data.csv")
setwd('/home/kitlim/wqd7001/ShinyTest/GroupProject/')
df = read.csv('data/data.csv', header=TRUE, sep = ",")
#Split Red And Blue Fighter into 2 data set
df1 = df[c(4,2,10:76,144)]
df2 = df[c(4,1,77:143,145)]
#Rename Column for btoh data set to prepare for row bind
for (x in names(df1)){
names(df1)[names(df1) == x] <- str_replace(x,"B_","")
}
for (x in names(df2)){
names(df2)[names(df2) == x] <- str_replace(x,"R_","")
}
#Bind 2 dataset
df3 <- rbind(df1,df2)
##Sort the data base on date, latest on top,
##so that when remove duplicate,
##lastest fight data will be on top
# df4$date <- as.Date(df3$date,"%d/%m/%Y")
# df4 <- df4[rev(order(df4$date)),]
df4 <- df3
df4$date <- as.Date(df3$date, format = "%Y-%m-%d")
df4 <- df4[rev(order(df4$date)),]
##A quick Cleaning on the Data
## Remove Record with NA on fight data
df5 <- df4[!is.na(df4$avg_BODY_att),]
## 1 NA on Height, replace with Mean
df5[is.na(df5$Height_cms),]$Height_cms <- mean(df5$Height_cms, na.rm = T)
## Replace NA on reach with height x reach ratio
avgHeightReachRatio <- mean(df5$Reach_cms, na.rm = T) / mean(df5$Height_cms,na.rm = T)
df5[is.na(df5$Reach_cms),]$Reach_cms <- df5[is.na(df5$Reach_cms),]$Height_cms * avgHeightReachRatio
#replace NA age with mean
df5[is.na(df5$age),]$age <- mean(df5$age, na.rm = T)
#Remove Duplicate Fighter Data, only use the lastest
df6 <- df5[!duplicated(df5$fighter),]
# """
# Not Using These
# MaxDistance <- max(df6$avg_DISTANCE_landed)
# MaxClose <- max(df6$avg_CLINCH_landed)
# MaxGround <- max(df6$avg_GROUND_landed)
#
# df6$DistanceAttack <- df6$avg_DISTANCE_landed / MaxDistance
# df6$CloseAttack <- df6$avg_CLINCH_landed/ MaxClose
# df6$GroundAttack <- df6$avg_GROUND_landed/MaxGround
# """
## Compute Variable for visualization
df6$distance_att <- ifelse(df6$avg_DISTANCE_att == 0, 0, df6$avg_DISTANCE_landed / df6$avg_DISTANCE_att)
df6$close_att <- ifelse(df6$avg_CLINCH_att == 0,0,df6$avg_CLINCH_landed / df6$avg_CLINCH_att)
df6$ground_att <- ifelse(df6$avg_GROUND_att == 0 ,0, df6$avg_GROUND_landed / df6$avg_GROUND_att)
df6$distance_def <- ifelse(df6$avg_opp_DISTANCE_att == 0, 0, 1 - df6$avg_opp_DISTANCE_landed / df6$avg_opp_DISTANCE_att)
df6$close_def <- ifelse(df6$avg_opp_CLINCH_att == 0,0,1 - df6$avg_opp_CLINCH_landed / df6$avg_opp_CLINCH_att)
df6$ground_def <- ifelse(df6$avg_opp_GROUND_att == 0 ,0,1 - df6$avg_opp_GROUND_landed / df6$avg_opp_GROUND_att)
df6$total_normal_att <-df6$avg_HEAD_att + df6$avg_BODY_att + df6$avg_LEG_att
df6$head_att_pct <- ifelse(df6$total_normal_att == 0, 0 , df6$avg_HEAD_att / df6$total_normal_att)
df6$head_att_acc <- ifelse(df6$avg_HEAD_att ==0,0,df6$avg_HEAD_landed /df6$avg_HEAD_att)
df6$body_att_pct <- ifelse(df6$total_normal_att ==0 , 0, df6$avg_BODY_att / df6$total_normal_att)
df6$body_att_acc <- ifelse(df6$avg_BODY_att== 0,0,df6$avg_BODY_landed /df6$avg_BODY_att)
df6$leg_att_pct <- ifelse(df6$total_normal_att == 0,0,df6$avg_LEG_att / df6$total_normal_att)
df6$leg_att_acc <- ifelse(df6$avg_LEG_att == 0,0,df6$avg_LEG_landed /df6$avg_LEG_att)
## Merge Data with profile
#profile = read.csv("C:/Users/Soon Loong/Desktop/ufcdata/profile.csv")
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
#image <- image[duplicated(image$name),]
image <- image %>% distinct(name)
##Join All
df7 <- merge(x = df6, y = image, by.x = "fighter",  by.y = "name",all.x = TRUE)
summary(df7)
View(df6)
View(image)
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
#image <- image[duplicated(image$name),]
image <- image %>% distinct(name)
View(image)
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
#image <- image[duplicated(image$name),]
image <- image %>% select(name, url) %>% distinct(name)
View(image)
View(df6)
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
image <- image[duplicated(image$name),]
#image <- image %>% select(name, url) %>% distinct(name)
##Join All
df7 <- merge(x = df6, y = image, by.x = "fighter",  by.y = "name",all.x = TRUE)
summary(df7)
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
#image <- image[duplicated(image$name),]
dup_image <- image[duplicated(image$name),]
setdiff(dup_image, image)
setdiff(dup_image, image)
setdiff(image, dup_image)
dist_image <- setdiff(image, dup_image)
profile = read.csv("data/profiles_full.csv")
image <- profile[c("name","url")]
#image <- image[duplicated(image$name),]
dup_image <- image[duplicated(image$name),]
dist_image <- setdiff(image, dup_image)
image <- setdiff(image, dup_image)
df7 <- merge(x = df6, y = image, by.x = "fighter",  by.y = "name",all.x = TRUE)
summary(df7)
df7[is.na(df7$url),]$fighter
write.csv(df7,"data/fighter_data.1.csv", row.names = FALSE)
fighter1 = read.csv("data/fighter_data.1.csv")
fighter2 = read.csv("data/fighter_data.csv")
setdiff(fighter1, fighter2)
names(fighter1)
names(fighter2)
library(shiny)
library(shinythemes)
library(htmlwidgets)
library(plotly)
setwd('/home/kitlim/wqd7001/ShinyTest/GroupProject/')
fighters = read.csv("data/fighter_data.csv", header = F)
fighter_list <- fighters %>% select(name, name)
fighter_list <- fighters %>% select(fighter, fighter)
str(fighters)
fighters = read.csv("data/fighter_data.csv", header = T)
fighter_list <- fighters %>% select(fighter, fighter)
str(fighters)
fighter_list
class(fighter_list)
fighter_list <- fighters %>% select(fighter) %>% mutate(value = fighter)
class(fighter_list)
fighter_list
fighter_list %>% as.vector()
fighter_list <- fighters %>% select(fighter) %>% mutate(value = fighter) %>% as.vector
runApp()
fighters = read.csv("data/fighter_data.csv")
fighter_in_game_stat_1 <- fighters %>%
filter(fighter=input$fighter_1) %>%
select(distance_def, close_def, close_att, distance_att, ground_att, ground_def) %>%
mutate(gap_closure = distance_def) %>%
as.vector
runApp()
fighters = read.csv("data/fighter_data.csv")
fighter_in_game_stat_1 <- fighters %>%
filter(fighter=="Aaron Rosa") %>%
select(distance_def, close_def, close_att, distance_att, ground_att, ground_def) %>%
mutate(gap_closure = distance_def) %>%
as.vector
fighter_in_game_stat_1
runApp()
runApp()
runApp()
fighters = read.csv("data/fighter_data.csv")
fighters %>% select(name) %>% head
fighters %>% select(fighter) %>% head
fighter_in_game_stat_1 <- fighters %>%
filter(fighter=="Aaron Riley") %>%
select(distance_def, close_def, close_att, distance_att, ground_att, ground_def) %>%
mutate(gap_closure = distance_def) %>%
as.vector
fighters %>%
filter(fighter=="Aaron Riley") %>%
select(distance_def, close_def, close_att, distance_att, ground_att, ground_def) %>%
mutate(gap_closure = distance_def) %>%
as.vector
fighters %>%
filter(fighter=="Abel Trujillo") %>%
select(distance_def, close_def, close_att, distance_att, ground_att, ground_def) %>%
mutate(gap_closure = distance_def) %>%
as.vector
runApp()
runApp()
runApp()
runApp()
runApp()
fighter_in_game_stat_1 <- fighters %>%
filter(fighter=="Aaron Riley") %>%
select(distance_def, close_def, close_att, distance_att, ground_att, ground_def) %>%
mutate(gap_closure = distance_def) %>%
as.vector
class(fighter_in_game_stat_1)
fighter_in_game_stat_1 %>% t
fighter_in_game_stat_1 %>% t %>% as.vector
fighter_in_game_stat_1 <- fighters %>%
filter(fighter=="Aaron Riley") %>%
select(distance_def, close_def, close_att, distance_att, ground_att, ground_def) %>%
mutate(gap_closure = distance_def) %>% t %>%  as.vector
class(fighter_in_game_stat_1)
runApp()
View(fighters)
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
select(Height_cms, Reach_cms, Weight_lbs, age)
profile
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
select(age, Height_cms, Weight_lbs, Reach_cms, Stance)
runApp()
pound_to_kg <- function(weight) {
return (round(weight*0.45359237, digits=2))
}
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_lbs, Reach_cms, Stance) %>%
rename(fighter = "Name", age = "Age")
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_kgs, Reach_cms, Stance) %>%
rename("Name" = fighter, "Age" = age, "Height (cm)" = Height_cms, "Weight (kg)" = Weight_lbs, "Reach (cm)" = Reach_cms)
fighters = read.csv("data/fighter_data.csv")
in_game_stat <- fighters %>%
filter(fighter=="Aaron Riley") %>%
select(distance_def, close_def, close_att, distance_att, ground_att, ground_def) %>%
mutate(gap_closure = distance_def) %>% t %>% as.vector
pound_to_kg <- function(weight) {
return (round(weight*0.45359237, digits=2))
}
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_kgs, Reach_cms, Stance) %>%
rename("Name" = fighter, "Age" = age, "Height (cm)" = Height_cms, "Weight (kg)" = Weight_lbs, "Reach (cm)" = Reach_cms)
fighters = read.csv("data/fighter_data.csv")
View(fighters)
View(fighter1)
View(df7)
View(df4)
View(df7)
View(fighters)
fighters = read.csv("data/fighter_data.csv")
View(fighters)
pound_to_kg <- function(weight) {
return (round(weight*0.45359237, digits=2))
}
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_kgs, Reach_cms, Stance) %>%
rename("Name" = fighter, "Age" = age, "Height (cm)" = Height_cms, "Weight (kg)" = Weight_lbs, "Reach (cm)" = Reach_cms)
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_kgs, Reach_cms, Stance) %>%
rename("Name" = fighter, "Age" = age, "Height (cm)" = Height_cms, "Weight (kg)" = Weight_kgs, "Reach (cm)" = Reach_cms)
profile
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_kgs, Reach_cms, Stance) %>%
rename("Name" = fighter, "Age" = age, "Height (cm)" = Height_cms, "Weight (kg)" = Weight_kgs, "Reach (cm)" = Reach_cms) %>%
column_to_rownames
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_kgs, Reach_cms, Stance) %>%
rename("Name" = fighter, "Age" = age, "Height (cm)" = Height_cms, "Weight (kg)" = Weight_kgs, "Reach (cm)" = Reach_cms) %>%
transpose
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_kgs, Reach_cms, Stance) %>%
rename("Name" = fighter, "Age" = age, "Height (cm)" = Height_cms, "Weight (kg)" = Weight_kgs, "Reach (cm)" = Reach_cms) %>%
column_to_rownames
profile
transpose
t(profile)
profile <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(fighter, age, Height_cms, Weight_kgs, Reach_cms, Stance) %>%
rename("Name" = fighter, "Age" = age, "Height (cm)" = Height_cms, "Weight (kg)" = Weight_kgs, "Reach (cm)" = Reach_cms) %>%
t
profile
class(profile)
runApp()
runApp()
runApp()
profile_pic <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(url) %>% t
profile_pic
profile_pic <- fighters %>%
filter(fighter==" as ") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(url) %>% t
profile_pic
length(profile_pic)
profile_pic <- fighters %>%
filter(fighter=="Aaron Riley") %>%
mutate(Weight_kgs = pound_to_kg(Weight_lbs)) %>%
select(url) %>% t
length(profile_pic)
profile_pic
profile_pic[1,1]
runApp()
runApp()
runApp()
